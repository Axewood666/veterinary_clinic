extends ../../layouts/admin.pug

block content
  .pets-page
    .page-header
      h1 Управление питомцами
      button.add-pet-btn#addPetBtn Добавить питомца

    .filters
      .filter-group
        label(for="typeFilter") Тип:
        select#typeFilter
          option(value="") Все типы
          option(value="dog") Собака
          option(value="cat") Кошка
          option(value="bird") Птица
          option(value="other") Другое
      .filter-group
        label(for="ownerFilter") Владелец:
        select#ownerFilter
          option(value="") Все владельцы
          each client in clients
            option(value=client.userid)= client.name

    if pets.length > 0
      .pets-container
        table.pets-table
          thead
            tr
              th ID
              th Имя
              th Тип
              th Порода
              th Возраст
              th Пол
              th Владелец
              th Действия
          tbody
            each pet in pets
              tr(data-petid=pet.petId)
                td= pet.petId
                td= pet.name
                td= pet.type
                td= pet.breed
                td= pet.age
                td= pet.gender
                td= pet.ownerName
                td
                  button.view-btn(data-petid=pet.petId) Просмотр
                  button.edit-btn(data-petid=pet.petId) Редактировать
                  button.delete-btn(data-petid=pet.petId) Удалить

        .pet-details#petDetails
          .details-header
            h2 Информация о питомце
            button.close-btn ×
          .details-content
            .detail-item
              span.label ID:
              span.value#detailId -
            .detail-item
              span.label Имя:
              span.value#detailName -
            .detail-item
              span.label Тип:
              span.value#detailType -
            .detail-item
              span.label Порода:
              span.value#detailBreed -
            .detail-item
              span.label Возраст:
              span.value#detailAge -
            .detail-item
              span.label Пол:
              span.value#detailGender -
            .detail-item
              span.label Владелец:
              span.value#detailOwner -
            .detail-item
              span.label Медицинская история:
              span.value#detailMedicalHistory -
          
          .appointments-section
            h3 История приемов
            .appointments-list#appointmentsList
              p Нет приемов

    else
      .no-pets
        p Питомцы не найдены

block scripts
  script.
    const BACKEND_URL = '!{backEndUrl}';
    
    document.addEventListener('DOMContentLoaded', function() {
      // Обработчики событий для фильтров
      document.getElementById('typeFilter')?.addEventListener('change', applyFilters);
      document.getElementById('ownerFilter')?.addEventListener('change', applyFilters);

      // Обработчики событий для кнопок
      document.getElementById('addPetBtn')?.addEventListener('click', showAddPetModal);
      
      document.querySelector('.pets-table')?.addEventListener('click', function(e) {
        if (e.target.classList.contains('view-btn')) {
          const petId = e.target.getAttribute('data-petid');
          fetchPetDetails(petId);
        }
        if (e.target.classList.contains('edit-btn')) {
          const petId = e.target.getAttribute('data-petid');
          showEditPetModal(petId);
        }
        if (e.target.classList.contains('delete-btn')) {
          const petId = e.target.getAttribute('data-petid');
          deletePet(petId);
        }
      });

      document.querySelector('.close-btn')?.addEventListener('click', function() {
        document.getElementById('petDetails')?.classList.remove('active');
      });

      async function applyFilters() {
        const type = document.getElementById('typeFilter').value;
        const ownerId = document.getElementById('ownerFilter').value;

        try {
          const response = await fetch(`${BACKEND_URL}/api/pets/filter?type=${type}&ownerId=${ownerId}`, {
            method: 'GET',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Не удалось применить фильтры');
          
          const pets = await response.json();
          updatePetsList(pets);
          
        } catch (error) {
          console.error('Ошибка при применении фильтров:', error);
          alert('Ошибка при применении фильтров');
        }
      }

      function updatePetsList(pets) {
        const tbody = document.querySelector('.pets-table tbody');
        if (pets.length > 0) {
          tbody.innerHTML = pets.map(pet => `
            <tr data-petid="${pet.petId}">
              <td>${pet.petId}</td>
              <td>${pet.name}</td>
              <td>${pet.type}</td>
              <td>${pet.breed || 'Н/Д'}</td>
              <td>${pet.age || 'Н/Д'}</td>
              <td>${pet.gender || 'Н/Д'}</td>
              <td>${pet.ownerName}</td>
              <td>
                <button class="view-btn" data-petid="${pet.petId}">Просмотр</button>
                <button class="edit-btn" data-petid="${pet.petId}">Редактировать</button>
                <button class="delete-btn" data-petid="${pet.petId}">Удалить</button>
              </td>
            </tr>
          `).join('');
        } else {
          tbody.innerHTML = '<tr><td colspan="8">Питомцы не найдены</td></tr>';
        }
      }

      async function fetchPetDetails(petId) {
        try {
          const response = await fetch(`${BACKEND_URL}/api/pets/${petId}`, {
            method: 'GET',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Питомец не найден');
          
          const petData = await response.json();
          updatePetDetails(petData);
          await fetchPetAppointments(petId);
          
        } catch (error) {
          console.error('Ошибка при получении данных питомца:', error);
          alert('Ошибка при загрузке данных питомца');
        }
      }

      function updatePetDetails(petData) {
        document.getElementById('detailId').textContent = petData.petId;
        document.getElementById('detailName').textContent = petData.name;
        document.getElementById('detailType').textContent = petData.type;
        document.getElementById('detailBreed').textContent = petData.breed || 'Н/Д';
        document.getElementById('detailAge').textContent = petData.age || 'Н/Д';
        document.getElementById('detailGender').textContent = petData.gender || 'Н/Д';
        document.getElementById('detailOwner').textContent = petData.ownerName;
        document.getElementById('detailMedicalHistory').textContent = petData.medicalHistory || 'Н/Д';
        
        document.getElementById('petDetails').classList.add('active');
      }

      async function fetchPetAppointments(petId) {
        try {
          const appointmentsList = document.getElementById('appointmentsList');
          appointmentsList.innerHTML = '<p>Загрузка приемов...</p>';
          
          const response = await fetch(`${BACKEND_URL}/api/pets/${petId}/appointments`, {
            method: 'GET',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Не удалось загрузить приемы');
          
          const appointments = await response.json();
          renderAppointments(appointments);
          
        } catch (error) {
          console.error('Ошибка при получении приемов:', error);
          appointmentsList.innerHTML = '<p>Ошибка при загрузке приемов</p>';
        }
      }

      function renderAppointments(appointments) {
        const appointmentsList = document.getElementById('appointmentsList');
        if (appointments.length > 0) {
          appointmentsList.innerHTML = appointments.map(appointment => `
            <div class="appointment-item">
              <h4>Прием #${appointment.appointmentId}</h4>
              <p>Дата: ${new Date(appointment.date).toLocaleDateString()}</p>
              <p>Время: ${appointment.time}</p>
              <p>Ветеринар: ${appointment.vetName}</p>
              <p>Статус: ${appointment.status}</p>
              <p>Диагноз: ${appointment.diagnosis || 'Н/Д'}</p>
              <p>Рекомендации: ${appointment.recommendations || 'Н/Д'}</p>
            </div>
          `).join('');
        } else {
          appointmentsList.innerHTML = '<p>Нет приемов</p>';
        }
      }

      async function deletePet(petId) {
        if (!confirm('Вы уверены, что хотите удалить этого питомца?')) return;

        try {
          const response = await fetch(`${BACKEND_URL}/api/pets/${petId}`, {
            method: 'DELETE',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Не удалось удалить питомца');
          
          const result = await response.json();
          if (result.success) {
            location.reload();
          }
        } catch (error) {
          console.error('Ошибка при удалении питомца:', error);
          alert('Ошибка при удалении питомца');
        }
      }

      function showAddPetModal() {
        // TODO: Реализовать модальное окно добавления питомца
        alert('Форма добавления питомца будет реализована здесь');
      }

      function showEditPetModal(petId) {
        // TODO: Реализовать модальное окно редактирования питомца
        alert('Форма редактирования питомца будет реализована здесь');
      }
    }); 