extends ../../layouts/admin.pug

block content
  .dashboard-page
    .page-header
      h1 Панель управления

    .stats-grid
      .stat-card
        .stat-title Всего клиентов
        .stat-value#totalClients - #{stats.clients.total}
      .stat-card
        .stat-title Всего питомцев
        .stat-value#totalPets - #{stats.pets.total}
      .stat-card
        .stat-title Проведенных приемов
        .stat-value#totalAppointments - #{stats.appointments.total}
      .stat-card
        .stat-title Всего ветеринаров
        .stat-value#activeVets - #{stats.vets.total}
      .stat-card
        .stat-title Всего менеджеров
        .stat-value#activeManagers - #{stats.managers ? stats.managers.total : 0}
      .stat-card
        .stat-title Активные приглашения
        .stat-value#activeInvites - #{stats.invitations ? stats.invitations.total : 0}

    .charts-grid
      .chart-card
        h3 Приемы по дням
        canvas#appointmentsChart
      .chart-card
        h3 Распределение питомцев по типам
        canvas#petsTypeChart
      .chart-card
        h3 Статусы приемов
        canvas#appointmentsStatusChart
      .chart-card
        h3 Загруженность ветеринаров
        canvas#vetsWorkloadChart

    .recent-activity
      h3 Последние действия
      .activity-list#activityList
        p Загрузка...

block scripts
  script(src="https://cdn.jsdelivr.net/npm/chart.js")
  script.
    const BACKEND_URL = '!{backEndUrl}';
    
    document.addEventListener('DOMContentLoaded', function() {
      // Загрузка статистики
      fetchDashboardStats();
      
      // Загрузка графиков
      fetchAppointmentsChart();
      fetchPetsTypeChart();
      fetchAppointmentsStatusChart();
      fetchVetsWorkloadChart();
      
      // Загрузка последних действий
      fetchRecentActivity();
    });

    async function fetchDashboardStats() {
      try {
        const response = await fetch(`${BACKEND_URL}/api/admin/dashboard/stats`, {
          method: 'GET',
          credentials: 'include'
        });
        if (!response.ok) throw new Error('Не удалось загрузить статистику');
        
        const stats = await response.json();
        updateStats(stats);
        
      } catch (error) {
        console.error('Ошибка при загрузке статистики:', error);
      }
    }

    function updateStats(stats) {
      document.getElementById('totalClients').textContent = stats.totalClients;
      document.getElementById('clientsChange').textContent = `${stats.clientsChange > 0 ? '+' : ''}${stats.clientsChange}`;
      
      document.getElementById('totalPets').textContent = stats.totalPets;
      document.getElementById('petsChange').textContent = `${stats.petsChange > 0 ? '+' : ''}${stats.petsChange}`;
      
      document.getElementById('totalAppointments').textContent = stats.totalAppointments;
      document.getElementById('appointmentsChange').textContent = `${stats.appointmentsChange > 0 ? '+' : ''}${stats.appointmentsChange}`;
      
      document.getElementById('activeVets').textContent = stats.activeVets;
      document.getElementById('vetsChange').textContent = `${stats.vetsChange > 0 ? '+' : ''}${stats.vetsChange}`;
    }

    async function fetchAppointmentsChart() {
      try {
        const response = await fetch(`${BACKEND_URL}/api/admin/dashboard/appointments-chart`, {
          method: 'GET',
          credentials: 'include'
        });
        if (!response.ok) throw new Error('Не удалось загрузить данные для графика');
        
        const data = await response.json();
        renderAppointmentsChart(data);
        
      } catch (error) {
        console.error('Ошибка при загрузке данных для графика приемов:', error);
      }
    }

    function renderAppointmentsChart(data) {
      const ctx = document.getElementById('appointmentsChart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.labels,
          datasets: [{
            label: 'Количество приемов',
            data: data.values,
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    async function fetchPetsTypeChart() {
      try {
        const response = await fetch(`${BACKEND_URL}/api/admin/dashboard/pets-type-chart`, {
          method: 'GET',
          credentials: 'include'
        });
        if (!response.ok) throw new Error('Не удалось загрузить данные для графика');
        
        const data = await response.json();
        renderPetsTypeChart(data);
        
      } catch (error) {
        console.error('Ошибка при загрузке данных для графика типов питомцев:', error);
      }
    }

    function renderPetsTypeChart(data) {
      const ctx = document.getElementById('petsTypeChart').getContext('2d');
      new Chart(ctx, {
        type: 'pie',
        data: {
          labels: data.labels,
          datasets: [{
            data: data.values,
            backgroundColor: [
              'rgb(255, 99, 132)',
              'rgb(54, 162, 235)',
              'rgb(255, 205, 86)',
              'rgb(75, 192, 192)'
            ]
          }]
        },
        options: {
          responsive: true
        }
      });
    }

    async function fetchAppointmentsStatusChart() {
      try {
        const response = await fetch(`${BACKEND_URL}/api/admin/dashboard/appointments-status-chart`, {
          method: 'GET',
          credentials: 'include'
        });
        if (!response.ok) throw new Error('Не удалось загрузить данные для графика');
        
        const data = await response.json();
        renderAppointmentsStatusChart(data);
        
      } catch (error) {
        console.error('Ошибка при загрузке данных для графика статусов приемов:', error);
      }
    }

    function renderAppointmentsStatusChart(data) {
      const ctx = document.getElementById('appointmentsStatusChart').getContext('2d');
      new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: data.labels,
          datasets: [{
            data: data.values,
            backgroundColor: [
              'rgb(75, 192, 192)',
              'rgb(255, 99, 132)',
              'rgb(255, 205, 86)'
            ]
          }]
        },
        options: {
          responsive: true
        }
      });
    }

    async function fetchVetsWorkloadChart() {
      try {
        const response = await fetch(`${BACKEND_URL}/api/admin/dashboard/vets-workload-chart`, {
          method: 'GET',
          credentials: 'include'
        });
        if (!response.ok) throw new Error('Не удалось загрузить данные для графика');
        
        const data = await response.json();
        renderVetsWorkloadChart(data);
        
      } catch (error) {
        console.error('Ошибка при загрузке данных для графика загруженности ветеринаров:', error);
      }
    }

    function renderVetsWorkloadChart(data) {
      const ctx = document.getElementById('vetsWorkloadChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.labels,
          datasets: [{
            label: 'Количество приемов',
            data: data.values,
            backgroundColor: 'rgb(75, 192, 192)'
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    async function fetchRecentActivity() {
      try {
        const response = await fetch(`${BACKEND_URL}/api/admin/dashboard/recent-activity`, {
          method: 'GET',
          credentials: 'include'
        });
        if (!response.ok) throw new Error('Не удалось загрузить последние действия');
        
        const activities = await response.json();
        renderRecentActivity(activities);
        
      } catch (error) {
        console.error('Ошибка при загрузке последних действий:', error);
        document.getElementById('activityList').innerHTML = '<p>Ошибка при загрузке последних действий</p>';
      }
    }

    function renderRecentActivity(activities) {
      const activityList = document.getElementById('activityList');
      if (activities.length > 0) {
        activityList.innerHTML = activities.map(activity => `
          <div class="activity-item">
            <div class="activity-time">${new Date(activity.timestamp).toLocaleString()}</div>
            <div class="activity-description">${activity.description}</div>
          </div>
        `).join('');
      } else {
        activityList.innerHTML = '<p>Нет последних действий</p>';
      }
    } 