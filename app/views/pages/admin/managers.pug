extends ../../layouts/admin.pug

block content
  .managers-page
    .page-header.d-flex.justify-content-between.align-items-center.mb-4
      h1 Управление менеджерами
      button.btn.btn-primary(data-bs-toggle="modal" data-bs-target="#inviteModal")
        i.bi.bi-person-plus.me-2
        | Пригласить менеджера

    .card.mb-4
      .card-header
        h2.h5.mb-0 Список менеджеров
      .card-body
        if managers && managers.length > 0
          .table-responsive
            table.table.table-striped.table-hover
              thead
                tr
                  th ID
                  th Имя
                  th Email
                  th Телефон
                  th Действия
              tbody
                each manager in managers
                  tr
                    td= manager.userid
                    td
                      if manager.avatar
                        img.avatar.me-2(src=manager.avatar, alt=manager.name, width="30" height="30" style="border-radius: 50%; object-fit: cover;")
                      = manager.name || manager.username
                    td= manager.email
                    td= manager.phoneNumber || 'Не указан'
                    td
                      a.btn.btn-sm.btn-outline-primary.me-2(href=`/admin/managers/${manager.userid}`)
                        i.bi.bi-eye.me-1
                        | Детали
                      button.btn.btn-sm.btn-outline-danger.ban-btn(data-userid=manager.userid data-username=manager.name || manager.username)
                        i.bi.bi-slash-circle.me-1
                        | Блокировать
        else
          .alert.alert-info Менеджеры не найдены

    if invitations && invitations.length > 0
      .card
        .card-header
          h2.h5.mb-0 Активные приглашения
        .card-body
          .table-responsive
            table.table.table-striped
              thead
                tr
                  th Email
                  th Дата создания
                  th Срок действия
                  th Действия
              tbody
                each invite in invitations.filter(i => i.role === 'Manager')
                  - const expiresDate = new Date(invite.expires_at)
                  - const isExpiringSoon = (expiresDate - new Date()) < 86400000 // 24 часа
                  tr(class=isExpiringSoon ? 'table-warning' : '')
                    td= invite.email
                    td= new Date(invite.created_at).toLocaleString('ru-RU')
                    td= new Date(invite.expires_at).toLocaleString('ru-RU')
                    td
                      button.btn.btn-sm.btn-outline-secondary.copy-invite-btn(data-token=invite.token)
                        i.bi.bi-clipboard.me-1
                        | Копировать ссылку
                      button.btn.btn-sm.btn-outline-danger.ms-2.revoke-invite-btn(data-id=invite.id)
                        i.bi.bi-x-circle.me-1
                        | Отозвать

  // Модальное окно для приглашения менеджера
  #inviteModal.modal.fade(tabindex="-1" aria-labelledby="inviteModalLabel" aria-hidden="true")
    .modal-dialog
      .modal-content
        .modal-header
          h5#inviteModalLabel.modal-title Пригласить менеджера
          button.btn-close(type="button" data-bs-dismiss="modal" aria-label="Close")
        .modal-body
          form#inviteForm
            .mb-3
              label.form-label(for="inviteEmail") Email
              input#inviteEmail.form-control(type="email" name="email" required)
              .form-text Приглашение будет отправлено на указанный email
            input(type="hidden" name="role" value="Manager")
        .modal-footer
          button.btn.btn-secondary(type="button" data-bs-dismiss="modal") Отмена
          button#sendInviteBtn.btn.btn-primary(type="button") Отправить приглашение

block scripts
  script.
    document.addEventListener('DOMContentLoaded', function() {
      // Отправка приглашения менеджеру
      const sendInviteBtn = document.getElementById('sendInviteBtn');
      if (sendInviteBtn) {
        sendInviteBtn.addEventListener('click', async function() {
          const email = document.getElementById('inviteEmail').value;
          if (!email) {
            showToast('Ошибка', 'Введите email для приглашения', 'error');
            return;
          }

          try {
            const response = await fetch('/admin/invite', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                email,
                role: 'Manager'
              })
            });

            const data = await response.json();
            
            if (response.ok) {
              showToast('Успешно', data.message || 'Приглашение отправлено', 'success');
              const modal = bootstrap.Modal.getInstance(document.getElementById('inviteModal'));
              if (modal) modal.hide();
              setTimeout(() => window.location.reload(), 1500);
            } else {
              showToast('Ошибка', data.message || 'Не удалось отправить приглашение', 'error');
            }
          } catch (error) {
            console.error('Ошибка при отправке приглашения:', error);
            showToast('Ошибка', 'Не удалось отправить приглашение', 'error');
          }
        });
      }

      // Копирование ссылки-приглашения
      document.querySelectorAll('.copy-invite-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const token = this.getAttribute('data-token');
          const inviteUrl = `${window.location.origin}/auth/register/invite/${token}`;
          
          navigator.clipboard.writeText(inviteUrl)
            .then(() => {
              showToast('Успешно', 'Ссылка скопирована в буфер обмена', 'success');
            })
            .catch(err => {
              console.error('Ошибка при копировании:', err);
              showToast('Ошибка', 'Не удалось скопировать ссылку', 'error');
            });
        });
      });

      // Отзыв приглашения
      document.querySelectorAll('.revoke-invite-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          if (!confirm('Вы уверены, что хотите отозвать это приглашение?')) {
            return;
          }

          const inviteId = this.getAttribute('data-id');
          try {
            const response = await fetch(`/api/invites/${inviteId}`, {
              method: 'DELETE'
            });

            if (response.ok) {
              showToast('Успешно', 'Приглашение отозвано', 'success');
              setTimeout(() => window.location.reload(), 1500);
            } else {
              const data = await response.json();
              showToast('Ошибка', data.message || 'Не удалось отозвать приглашение', 'error');
            }
          } catch (error) {
            console.error('Ошибка при отзыве приглашения:', error);
            showToast('Ошибка', 'Не удалось отозвать приглашение', 'error');
          }
        });
      });

      // Блокировка менеджера
      document.querySelectorAll('.ban-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          const userId = this.getAttribute('data-userid');
          const username = this.getAttribute('data-username');
          
          if (!confirm(`Вы уверены, что хотите заблокировать менеджера ${username}?`)) {
            return;
          }

          try {
            const response = await fetch(`/api/users/${userId}/ban`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                reason: 'Заблокирован администратором'
              })
            });

            if (response.ok) {
              showToast('Успешно', 'Менеджер заблокирован', 'success');
              setTimeout(() => window.location.reload(), 1500);
            } else {
              const data = await response.json();
              showToast('Ошибка', data.message || 'Не удалось заблокировать менеджера', 'error');
            }
          } catch (error) {
            console.error('Ошибка при блокировке менеджера:', error);
            showToast('Ошибка', 'Не удалось заблокировать менеджера', 'error');
          }
        });
      });

      // Вспомогательная функция для отображения уведомлений
      function showToast(title, message, type = 'info') {
        if (typeof Toastify === 'function') {
          Toastify({
            text: message,
            className: `toast-${type}`,
            duration: 3000
          }).showToast();
        } else {
          alert(`${title}: ${message}`);
        }
      }
    });
