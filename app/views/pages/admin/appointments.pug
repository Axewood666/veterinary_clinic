extends ../../layouts/admin.pug

block content
  .appointments-page
    .page-header
      h1 Управление приемами
      button.add-appointment-btn#addAppointmentBtn Добавить прием

    .filters
      .filter-group
        label(for="dateFilter") Дата:
        input#dateFilter(type="date")
      .filter-group
        label(for="vetFilter") Ветеринар:
        select#vetFilter
          option(value="") Все ветеринары
          each vet in vets
            option(value=vet.userid)= vet.name
      .filter-group
        label(for="statusFilter") Статус:
        select#statusFilter
          option(value="") Все статусы
          option(value="scheduled") Запланирован
          option(value="completed") Завершен
          option(value="cancelled") Отменен

    if appointments.length > 0
      .appointments-container
        table.appointments-table
          thead
            tr
              th ID
              th Дата
              th Время
              th Ветеринар
              th Клиент
              th Питомец
              th Статус
              th Действия
          tbody
            each appointment in appointments
              tr(data-appointmentid=appointment.appointmentId)
                td= appointment.appointmentId
                td= new Date(appointment.date).toLocaleDateString()
                td= appointment.time
                td= appointment.vetName
                td= appointment.clientName
                td= appointment.petName
                td= appointment.status
                td
                  button.view-btn(data-appointmentid=appointment.appointmentId) Просмотр
                  button.edit-btn(data-appointmentid=appointment.appointmentId) Редактировать
                  if appointment.status === 'scheduled'
                    button.cancel-btn(data-appointmentid=appointment.appointmentId) Отменить

        .appointment-details#appointmentDetails
          .details-header
            h2 Детали приема
            button.close-btn ×
          .details-content
            .detail-item
              span.label ID:
              span.value#detailId -
            .detail-item
              span.label Дата:
              span.value#detailDate -
            .detail-item
              span.label Время:
              span.value#detailTime -
            .detail-item
              span.label Ветеринар:
              span.value#detailVet -
            .detail-item
              span.label Клиент:
              span.value#detailClient -
            .detail-item
              span.label Питомец:
              span.value#detailPet -
            .detail-item
              span.label Статус:
              span.value#detailStatus -
            .detail-item
              span.label Причина:
              span.value#detailReason -
            .detail-item
              span.label Диагноз:
              span.value#detailDiagnosis -
            .detail-item
              span.label Рекомендации:
              span.value#detailRecommendations -

    else
      .no-appointments
        p Приемы не найдены

block scripts
  script.
    const BACKEND_URL = '!{backEndUrl}';
    
    document.addEventListener('DOMContentLoaded', function() {
      // Обработчики событий для фильтров
      document.getElementById('dateFilter')?.addEventListener('change', applyFilters);
      document.getElementById('vetFilter')?.addEventListener('change', applyFilters);
      document.getElementById('statusFilter')?.addEventListener('change', applyFilters);

      // Обработчики событий для кнопок
      document.getElementById('addAppointmentBtn')?.addEventListener('click', showAddAppointmentModal);
      
      document.querySelector('.appointments-table')?.addEventListener('click', function(e) {
        if (e.target.classList.contains('view-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          fetchAppointmentDetails(appointmentId);
        }
        if (e.target.classList.contains('edit-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          showEditAppointmentModal(appointmentId);
        }
        if (e.target.classList.contains('cancel-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          cancelAppointment(appointmentId);
        }
      });

      document.querySelector('.close-btn')?.addEventListener('click', function() {
        document.getElementById('appointmentDetails')?.classList.remove('active');
      });

      async function applyFilters() {
        const date = document.getElementById('dateFilter').value;
        const vetId = document.getElementById('vetFilter').value;
        const status = document.getElementById('statusFilter').value;

        try {
          const response = await fetch(`${BACKEND_URL}/api/appointments/filter?date=${date}&vetId=${vetId}&status=${status}`, {
            method: 'GET',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Не удалось применить фильтры');
          
          const appointments = await response.json();
          updateAppointmentsList(appointments);
          
        } catch (error) {
          console.error('Ошибка при применении фильтров:', error);
          alert('Ошибка при применении фильтров');
        }
      }

      function updateAppointmentsList(appointments) {
        const tbody = document.querySelector('.appointments-table tbody');
        if (appointments.length > 0) {
          tbody.innerHTML = appointments.map(appointment => `
            <tr data-appointmentid="${appointment.appointmentId}">
              <td>${appointment.appointmentId}</td>
              <td>${new Date(appointment.date).toLocaleDateString()}</td>
              <td>${appointment.time}</td>
              <td>${appointment.vetName}</td>
              <td>${appointment.clientName}</td>
              <td>${appointment.petName}</td>
              <td>${appointment.status}</td>
              <td>
                <button class="view-btn" data-appointmentid="${appointment.appointmentId}">Просмотр</button>
                <button class="edit-btn" data-appointmentid="${appointment.appointmentId}">Редактировать</button>
                ${appointment.status === 'scheduled' ? 
                  `<button class="cancel-btn" data-appointmentid="${appointment.appointmentId}">Отменить</button>` : 
                  ''}
              </td>
            </tr>
          `).join('');
        } else {
          tbody.innerHTML = '<tr><td colspan="8">Приемы не найдены</td></tr>';
        }
      }

      async function fetchAppointmentDetails(appointmentId) {
        try {
          const response = await fetch(`${BACKEND_URL}/api/appointments/${appointmentId}`, {
            method: 'GET',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Прием не найден');
          
          const appointmentData = await response.json();
          updateAppointmentDetails(appointmentData);
          
        } catch (error) {
          console.error('Ошибка при получении данных приема:', error);
          alert('Ошибка при загрузке данных приема');
        }
      }

      function updateAppointmentDetails(appointmentData) {
        document.getElementById('detailId').textContent = appointmentData.appointmentId;
        document.getElementById('detailDate').textContent = new Date(appointmentData.date).toLocaleDateString();
        document.getElementById('detailTime').textContent = appointmentData.time;
        document.getElementById('detailVet').textContent = appointmentData.vetName;
        document.getElementById('detailClient').textContent = appointmentData.clientName;
        document.getElementById('detailPet').textContent = appointmentData.petName;
        document.getElementById('detailStatus').textContent = appointmentData.status;
        document.getElementById('detailReason').textContent = appointmentData.reason || 'Н/Д';
        document.getElementById('detailDiagnosis').textContent = appointmentData.diagnosis || 'Н/Д';
        document.getElementById('detailRecommendations').textContent = appointmentData.recommendations || 'Н/Д';
        
        document.getElementById('appointmentDetails').classList.add('active');
      }

      async function cancelAppointment(appointmentId) {
        if (!confirm('Вы уверены, что хотите отменить этот прием?')) return;

        try {
          const response = await fetch(`${BACKEND_URL}/api/appointments/${appointmentId}/cancel`, {
            method: 'POST',
            credentials: 'include'
          });
          if (!response.ok) throw new Error('Не удалось отменить прием');
          
          const result = await response.json();
          if (result.success) {
            location.reload();
          }
        } catch (error) {
          console.error('Ошибка при отмене приема:', error);
          alert('Ошибка при отмене приема');
        }
      }

      function showAddAppointmentModal() {
        // TODO: Реализовать модальное окно добавления приема
        alert('Форма добавления приема будет реализована здесь');
      }

      function showEditAppointmentModal(appointmentId) {
        // TODO: Реализовать модальное окно редактирования приема
        alert('Форма редактирования приема будет реализована здесь');
      }
    }); 