extends ../../layouts/admin.pug

block content
  .appointments-page
    .page-header
      h1 Управление приемами
      button.add-appointment-btn#addAppointmentBtn Добавить прием

    .filters
      .filter-group
        label(for="dateFilter") Дата:
        input#dateFilter(type="date" value=filters && filters.date ? filters.date : '')
      .filter-group
        label(for="vetFilter") Ветеринар:
        select#vetFilter
          option(value="") Все ветеринары
          each vet in vets
            option(value=vet.userid selected=filters && filters.vetId == vet.userid)= vet.name
      .filter-group
        label(for="statusFilter") Статус:
        select#statusFilter
          option(value="") Все статусы
          option(value="scheduled" selected=filters && filters.status === 'scheduled') Запланирован
          option(value="accepted" selected=filters && filters.status === 'accepted') Подтвержден
          option(value="completed" selected=filters && filters.status === 'completed') Завершен
          option(value="cancelled" selected=filters && filters.status === 'cancelled') Отменен
      .filter-group
        button.filter-btn#applyFilters Применить

    if appointments && appointments.length > 0
      .appointments-container
        table.appointments-table
          thead
            tr
              th ID
              th Дата
              th Время
              th Ветеринар
              th Питомец
              th Тип приема
              th Статус
              th Действия
          tbody
            each appointment in appointments
              tr(data-appointmentid=appointment.appointmentid)
                td= appointment.appointmentid
                td= new Date(appointment.date).toLocaleDateString()
                td= appointment.time
                td= appointment.vetName
                td= appointment.petName
                td= appointment.type
                td= appointment.status
                td
                  button.view-btn(data-appointmentid=appointment.appointmentid) Просмотр
                  button.edit-btn(data-appointmentid=appointment.appointmentid) Редактировать
                  if appointment.status === 'scheduled'
                    button.accept-btn(data-appointmentid=appointment.appointmentid) Подтвердить
                    button.cancel-btn(data-appointmentid=appointment.appointmentid) Отменить
                  if appointment.status === 'accepted'
                    button.cancel-btn(data-appointmentid=appointment.appointmentid) Отменить
                    button.complete-btn(data-appointmentid=appointment.appointmentid) Завершить

        .appointment-details#appointmentDetails
          .details-header
            h2 Детали приема
            button.close-btn ×
          .details-content
            .detail-item
              span.label ID:
              span.value#detailId -
            .detail-item
              span.label Дата:
              span.value#detailDate -
            .detail-item
              span.label Время:
              span.value#detailTime -
            .detail-item
              span.label Ветеринар:
              span.value#detailVet -
            .detail-item
              span.label Питомец:
              span.value#detailPet -
            .detail-item
              span.label Тип:
              span.value#detailType -
            .detail-item
              span.label Статус:
              span.value#detailStatus -
            .detail-item
              span.label Комментарий:
              span.value#detailComment -
            .detail-item
              span.label Диагноз:
              span.value#detailDiagnosis -
            .detail-item
              span.label Рекомендации:
              span.value#detailRecomendations -

    else
      .no-appointments
        p Приемы не найдены
        
    // Модальное окно добавления/редактирования приема
    .modal#appointmentModal
      .modal-content
        .modal-header
          h2#modalTitle Добавить прием
          span.close ×
        .modal-body
          form#appointmentForm
            input(type="hidden" id="appointmentId" name="appointmentid")
            .form-group
              label(for="petid") Питомец:
              select#petid(name="petid" required)
                option(value="") Выберите питомца
                // Список питомцев будет загружен динамически
            .form-group
              label(for="vetid") Ветеринар:
              select#vetid(name="vetid" required)
                option(value="") Выберите ветеринара
                each vet in vets
                  option(value=vet.userid)= vet.name
            .form-group
              label(for="date") Дата:
              input#date(type="date" name="date" required)
            .form-group
              label(for="time") Время:
              select#time(name="time" required)
                option(value="") Выберите время
                - let hours = ['09', '10', '11', '12', '13', '14', '15', '16', '17']
                - let minutes = ['00', '30']
                each hour in hours
                  each minute in minutes
                    option(value=`${hour}:${minute}`)= `${hour}:${minute}`
            .form-group
              label(for="type") Тип:
              select#type(name="type" required)
                option(value="consultation") Консультация
                option(value="vaccination") Вакцинация
                option(value="other") Другое
            .form-group
              label(for="comment") Комментарий:
              textarea#comment(name="comment" rows="3")
            .form-group
              label(for="status") Статус:
              select#status(name="status" required)
                option(value="scheduled") Запланирован
                option(value="accepted") Подтвержден
                option(value="completed") Завершен
                option(value="cancelled") Отменен
            .form-group.diagnosis-group
              label(for="diagnosis") Диагноз:
              textarea#diagnosis(name="diagnosis" rows="3" placeholder="Укажите диагноз при завершении приема")
              small.required-note (обязательно для завершенных приемов)
            .form-group.recomendations-group
              label(for="recomendations") Рекомендации:
              textarea#recomendations(name="recomendations" rows="3" placeholder="Укажите рекомендации для пациента (необязательно)")
            .form-buttons
              button(type="submit") Сохранить
              button(type="button" class="cancel-modal") Отмена

    // Модальное окно завершения приема
    //- .modal#completeModal
    //-   .modal-content
    //-     .modal-header
    //-       h2 Завершение приема
    //-       span.close-complete ×
    //-     .modal-body
    //-       form#completeForm
    //-         input(type="hidden" id="completeAppointmentId" name="appointmentid")
    //-         .form-group
    //-           label(for="completeDiagnosis") Диагноз *
    //-           textarea#completeDiagnosis(name="diagnosis" rows="3" placeholder="Укажите диагноз" required)
    //-         .form-group
    //-           label(for="completeRecomendations") Рекомендации
    //-           textarea#completeRecomendations(name="recomendations" rows="3" placeholder="Укажите рекомендации для пациента (необязательно)")
    //-         .form-buttons
    //-           button(type="submit") Сохранить
    //-           button(type="button" class="cancel-complete-modal") Отмена

block scripts
  script.
    document.addEventListener('DOMContentLoaded', function() {
      // DOM-элементы
      const dateFilter = document.getElementById('dateFilter');
      const vetFilter = document.getElementById('vetFilter');
      const statusFilter = document.getElementById('statusFilter');
      const applyFiltersBtn = document.getElementById('applyFilters');
      const appointmentDetails = document.getElementById('appointmentDetails');
      const closeBtn = document.querySelector('.close-btn');
      const addAppointmentBtn = document.getElementById('addAppointmentBtn');
      
      // Модальное окно
      const modal = document.getElementById('appointmentModal');
      modal.style.display = 'none';
      const modalClose = modal.querySelector('.close');
      const modalCancel = modal.querySelector('.cancel-modal');
      const appointmentForm = document.getElementById('appointmentForm');
      const statusSelect = document.getElementById('status');
      const diagnosisGroup = document.querySelector('.diagnosis-group');
      const recomendationsGroup = document.querySelector('.recomendations-group');
      
      // Модальное окно завершения приема
      //- const completeModal = document.getElementById('completeModal');
      //- completeModal.style.display = 'none';
      //- const completeModalClose = completeModal.querySelector('.close-complete');
      //- const completeModalCancel = completeModal.querySelector('.cancel-complete-modal');
      //- const completeForm = document.getElementById('completeForm');
      
      // Обработчики событий
      if (applyFiltersBtn) {
        applyFiltersBtn.addEventListener('click', applyFilters);
      }
      
      if (closeBtn) {
        closeBtn.addEventListener('click', function() {
          appointmentDetails.classList.remove('active');
        });
      }
      
      if (addAppointmentBtn) {
        addAppointmentBtn.addEventListener('click', function() {
          showAppointmentModal('add');
        });
      }
      
      if (modalClose) {
        modalClose.addEventListener('click', closeModal);
      }
      
      if (modalCancel) {
        modalCancel.addEventListener('click', closeModal);
      }
      
      if (statusSelect) {
        statusSelect.addEventListener('change', function() {
          toggleDiagnosisFields(this.value);
        });
      }
      
      // Делегирование событий для кнопок в таблице
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('view-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          fetchAppointmentDetails(appointmentId);
        } else if (e.target.classList.contains('edit-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          showAppointmentModal('edit', appointmentId);
        } else if (e.target.classList.contains('accept-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          acceptAppointment(appointmentId);
        } else if (e.target.classList.contains('complete-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          completeAppointment(appointmentId);
        } else if (e.target.classList.contains('cancel-btn')) {
          const appointmentId = e.target.getAttribute('data-appointmentid');
          cancelAppointment(appointmentId);
        }
      });
      
      // Отправка формы
      if (appointmentForm) {
        appointmentForm.addEventListener('submit', function(e) {
          e.preventDefault();
          saveAppointment();
        });
      }
      
      //- if (completeModalClose) {
      //-   completeModalClose.addEventListener('click', closeCompleteModal);
      //- }
      
      //- if (completeModalCancel) {
      //-   completeModalCancel.addEventListener('click', closeCompleteModal);
      //- }
      
      //- if (completeForm) {
      //-   completeForm.addEventListener('submit', function(e) {
      //-     e.preventDefault();
      //-     saveCompletedAppointment();
      //-   });
      //- }
      
      // Функции
      function applyFilters() {
        const date = dateFilter ? dateFilter.value : '';
        const vetId = vetFilter ? vetFilter.value : '';
        const status = statusFilter ? statusFilter.value : '';
        
        window.location.href = `/employee/appointments?date=${date}&vetId=${vetId}&status=${status}`;
      }
      
      async function fetchAppointmentDetails(appointmentId) {
        try {
          const response = await fetch(`/api/appointments/${appointmentId}`);
          if (!response.ok) throw new Error('Не удалось получить данные о приеме');
          
          const appointment = await response.json();
          displayAppointmentDetails(appointment);
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Произошла ошибка при загрузке данных приема');
        }
      }
      
      function displayAppointmentDetails(appointment) {
        document.getElementById('detailId').textContent = appointment.appointmentid || '';
        document.getElementById('detailDate').textContent = appointment.date ? new Date(appointment.date).toLocaleDateString() : '';
        document.getElementById('detailTime').textContent = appointment.time || '';
        document.getElementById('detailVet').textContent = appointment.vet_name || '';
        document.getElementById('detailPet').textContent = appointment.pet_name || '';
        document.getElementById('detailType').textContent = appointment.type || '';
        document.getElementById('detailStatus').textContent = appointment.status || '';
        document.getElementById('detailComment').textContent = appointment.comment || 'Н/Д';
        document.getElementById('detailDiagnosis').textContent = appointment.diagnosis || 'Н/Д';
        document.getElementById('detailRecomendations').textContent = appointment.recomendations || 'Н/Д';
        
        appointmentDetails.classList.add('active');
      }
      
      async function showAppointmentModal(mode, appointmentId = null) {
        resetModalForm();
        
        // Установка заголовка
        document.getElementById('modalTitle').textContent = mode === 'add' ? 'Добавить прием' : 'Редактировать прием';
        
        // Загрузка списка питомцев
        await loadPets();
        
        // Если режим редактирования, загружаем данные
        if (mode === 'edit' && appointmentId) {
          await loadAppointmentData(appointmentId);
        } else {
          // Скрываем поля диагноза для нового приема
          toggleDiagnosisFields('scheduled');
        }
        
        // Открываем модальное окно
        modal.style.display = 'block';
      }
      
      async function loadPets() {
        try {
          const response = await fetch('/api/pets');
          if (!response.ok) throw new Error('Не удалось загрузить список питомцев');
          
          const pets = await response.json();
          const petSelect = document.getElementById('petid');
          
          // Очищаем текущие опции, кроме первой
          while (petSelect.options.length > 1) {
            petSelect.remove(1);
          }
          
          // Добавляем новые опции
          pets.forEach(pet => {
            const option = document.createElement('option');
            option.value = pet.petid;
            option.textContent = `${pet.name} (${pet.ownerName})`;
            petSelect.appendChild(option);
          });
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Не удалось загрузить список питомцев');
        }
      }
      
      async function loadAppointmentData(appointmentId) {
        try {
          const response = await fetch(`/api/appointments/${appointmentId}`);
          if (!response.ok) throw new Error('Не удалось загрузить данные приема');
          
          const appointment = await response.json();
          
          // Заполняем форму данными
          document.getElementById('appointmentId').value = appointment.appointmentid;
          document.getElementById('petid').value = appointment.petid;
          document.getElementById('vetid').value = appointment.vetid;
          
          // Форматируем дату для input[type=date]
          if (appointment.date) {
            const date = new Date(appointment.date);
            const formattedDate = date.toISOString().split('T')[0];
            document.getElementById('date').value = formattedDate;
          }
          
          document.getElementById('time').value = appointment.time;
          document.getElementById('type').value = appointment.type;
          document.getElementById('comment').value = appointment.comment || '';
          document.getElementById('status').value = appointment.status;
          document.getElementById('diagnosis').value = appointment.diagnosis || '';
          document.getElementById('recomendations').value = appointment.recomendations || '';
          
          // Показываем/скрываем поля диагноза в зависимости от статуса
          toggleDiagnosisFields(appointment.status);
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Не удалось загрузить данные приема');
          closeModal();
        }
      }
      
      function resetModalForm() {
        appointmentForm.reset();
        document.getElementById('appointmentId').value = '';
      }
      
      function closeModal() {
        modal.style.display = 'none';
        resetModalForm();
      }
      
      function toggleDiagnosisFields(status) {
        const diagnosisGroup = document.querySelector('.diagnosis-group');
        const recomendationsGroup = document.querySelector('.recomendations-group');
        
        if (status === 'completed') {
          // Показываем поля с анимацией
          diagnosisGroup.style.display = 'block';
          recomendationsGroup.style.display = 'block';
          
          // Добавляем визуальное выделение полей
          diagnosisGroup.style.backgroundColor = '#f8f9fa';
          recomendationsGroup.style.backgroundColor = '#f8f9fa';
          diagnosisGroup.style.padding = '10px';
          recomendationsGroup.style.padding = '10px';
          diagnosisGroup.style.borderRadius = '5px';
          recomendationsGroup.style.borderRadius = '5px';
          diagnosisGroup.style.border = '1px solid #ddd';
          recomendationsGroup.style.border = '1px solid #ddd';
          
          // Добавляем подсказку об обязательности заполнения
          const diagnosisLabel = diagnosisGroup.querySelector('label');
          if (diagnosisLabel && !diagnosisLabel.innerHTML.includes('*')) {
            diagnosisLabel.innerHTML += ' <span style="color: red">*</span>';
          }
        } else {
          // Скрываем поля
          diagnosisGroup.style.display = 'none';
          recomendationsGroup.style.display = 'none';
          
          // Сбрасываем стили
          diagnosisGroup.style.backgroundColor = '';
          recomendationsGroup.style.backgroundColor = '';
          diagnosisGroup.style.padding = '';
          recomendationsGroup.style.padding = '';
          diagnosisGroup.style.borderRadius = '';
          recomendationsGroup.style.borderRadius = '';
          diagnosisGroup.style.border = '';
          recomendationsGroup.style.border = '';
        }
      }
      
      async function saveAppointment() {
        const appointmentId = document.getElementById('appointmentId').value;
        const isNewAppointment = !appointmentId;
        const status = document.getElementById('status').value;
        
        // Валидация полей диагноза и рекомендаций для завершенных приемов
        if (status === 'completed') {
          const diagnosis = document.getElementById('diagnosis').value.trim();
          
          if (!diagnosis) {
            alert('Для завершенного приема необходимо указать диагноз!');
            document.getElementById('diagnosis').focus();
            return;
          }
        }
        
        // Собираем данные формы
        const formData = {
          petid: document.getElementById('petid').value,
          vetid: document.getElementById('vetid').value,
          date: document.getElementById('date').value,
          time: document.getElementById('time').value,
          type: document.getElementById('type').value,
          comment: document.getElementById('comment').value,
          status: status
        };
        
        // Добавляем диагноз и рекомендации только если статус "completed"
        if (formData.status === 'completed') {
          formData.diagnosis = document.getElementById('diagnosis').value;
          formData.recomendations = document.getElementById('recomendations').value;
        }
        
        try {
          const url = isNewAppointment 
            ? '/api/appointments' 
            : `/api/appointments/${appointmentId}`;
          
          const method = isNewAppointment ? 'POST' : 'PUT';
          
          const response = await fetch(url, {
            method: method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });
          
          if (!response.ok) throw new Error('Не удалось сохранить данные приема');
          
          // Перезагружаем страницу после успешного сохранения
          window.location.reload();
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Произошла ошибка при сохранении данных приема');
        }
      }
      
      async function cancelAppointment(appointmentId) {
        if (!confirm('Вы уверены, что хотите отменить этот прием?')) return;
        
        try {
          const response = await fetch(`/api/appointments/${appointmentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: 'cancelled' })
          });
          
          if (!response.ok) throw new Error('Не удалось отменить прием');
          
          // Перезагружаем страницу после успешной отмены
          window.location.reload();
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Произошла ошибка при отмене приема');
        }
      }
      
      async function acceptAppointment(appointmentId) {
        if (!confirm('Вы уверены, что хотите подтвердить этот прием?')) return;
        
        try {
          const response = await fetch(`/api/appointments/${appointmentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: 'accepted' })
          });
          
          if (!response.ok) throw new Error('Не удалось подтвердить прием');
          
          // Перезагружаем страницу после успешного подтверждения
          window.location.reload();
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Произошла ошибка при подтверждении приема');
        }
      }
      
      async function completeAppointment(appointmentId) {
        if (confirm('Хотите добавить диагноз и рекомендации?')) {
          // Открываем модальное окно для ввода диагноза и рекомендаций перед завершением
          await showCompletionModal(appointmentId);
        } else {
          // Просто меняем статус без ввода диагноза
          try {
            const response = await fetch(`/api/appointments/${appointmentId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ status: 'completed' })
            });
            
            if (!response.ok) throw new Error('Не удалось завершить прием');
            
            // Перезагружаем страницу после успешного завершения
            window.location.reload();
            
          } catch (error) {
            console.error('Ошибка:', error);
            alert('Произошла ошибка при завершении приема');
          }
        }
      }
      
      async function showCompletionModal(appointmentId) {
        try {
          // Загружаем данные о приеме
          const response = await fetch(`/api/appointments/${appointmentId}`);
          if (!response.ok) throw new Error('Не удалось загрузить данные приема');
          
          const appointment = await response.json();
          
          // Заполняем форму данными и устанавливаем статус "completed"
          document.getElementById('appointmentId').value = appointment.appointmentid;
          document.getElementById('petid').value = appointment.petid;
          document.getElementById('vetid').value = appointment.vetid;
          
          // Форматируем дату для input[type=date]
          if (appointment.date) {
            const date = new Date(appointment.date);
            const formattedDate = date.toISOString().split('T')[0];
            document.getElementById('date').value = formattedDate;
          }
          
          document.getElementById('time').value = appointment.time;
          document.getElementById('type').value = appointment.type;
          document.getElementById('comment').value = appointment.comment || '';
          document.getElementById('status').value = 'completed';
          
          // Показываем поля диагноза и рекомендаций
          toggleDiagnosisFields('completed');
          
          // Устанавливаем заголовок модального окна
          document.getElementById('modalTitle').textContent = 'Завершить прием';
          
          // Открываем модальное окно
          modal.style.display = 'block';
          
          // Фокусируем на поле диагноза для удобства ввода
          document.getElementById('diagnosis').focus();
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Не удалось открыть форму завершения приема');
        }
      }
      
      //- function closeCompleteModal() {
      //-   completeModal.style.display = 'none';
      //-   resetModalForm();
      //- }
      
      async function saveCompletedAppointment() {
        const appointmentId = document.getElementById('completeAppointmentId').value;
        const diagnosis = document.getElementById('completeDiagnosis').value.trim();
        const recomendations = document.getElementById('completeRecomendations').value.trim();
        
        if (!diagnosis) {
          alert('Для завершенного приема необходимо указать диагноз!');
          document.getElementById('completeDiagnosis').focus();
          return;
        }
        
        try {
          const response = await fetch(`/api/appointments/${appointmentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              status: 'completed',
              diagnosis: diagnosis,
              recomendations: recomendations
            })
          });
          
          if (!response.ok) throw new Error('Не удалось завершить прием');
          
          // Перезагружаем страницу после успешного завершения
          window.location.reload();
          
        } catch (error) {
          console.error('Ошибка:', error);
          alert('Произошла ошибка при завершении приема');
        }
      }
    }); 